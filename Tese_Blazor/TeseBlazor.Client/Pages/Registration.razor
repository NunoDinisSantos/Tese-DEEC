@page "/"
@rendermode InteractiveWebAssembly
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Registo</PageTitle>

<div class="top-bar-rectangle">
    
    <h1>Misterios Aquaticos - DEEC</h1>

</div>
<div>
This work is part of a dissertation from the Department of Electrical and Computers Engineering, University of Coimbra.
</div>


<div class="description-container">
Use your student number in your card as your ID to play the game! The goal is to do some exercise while having fun! You can also win credits which you can trade for real world rewards!
</div>

<div class="centered-container">
    <div class="center-rectangle">
        <h1>Registration</h1>
        <div>
            <label for="numeroEstudante">Insert student number:</label>
            <InputText id="numeroEstudante" @bind-Value="NumeroEstudante" />
        </div>

        <div>
            <button class="btn btn-primary" @onclick="Registar">Create account</button>
            <label>@ErrorMessage</label>
        </div>
        </div>
</div>

@code {
    private string NumeroEstudante { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task Registar()
    {       
        if (!System.Text.RegularExpressions.Regex.IsMatch(NumeroEstudante, @"^\d*$"))
        {
            ErrorMessage = "Error: Only numbers allowed.";
            return;
        }

        if (NumeroEstudante.Length != 10)
        {
            ErrorMessage = "Error: Student number has 10 digits.";
            return;
        }

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/misteriosaquaticos", NumeroEstudante);

            if (response.IsSuccessStatusCode)
            {
                string navigate = "/sucesso/" + NumeroEstudante;
                NavigationManager.NavigateTo(navigate);
                return;
            }
            else
            {
                ErrorMessage = "Error creating player. That ID may already be in use.";
                StateHasChanged();
                return;
            }
        }

        catch(Exception e)
        {
            ErrorMessage = e.Message;
        }
    }
}