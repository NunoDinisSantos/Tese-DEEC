@page "/"
@rendermode InteractiveWebAssembly
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Registo</PageTitle>

<div class="header-div">
    <div class="top-bar-rectangle">   
        <h1>Misterios Aquaticos - DEEC</h1>
    </div>

    <div class="top-bar-description">
        <div>
            This work is part of a dissertation from the Department of Electrical and Computers Engineering, University of Coimbra.
        </div>
    </div>
</div>


<div class="center-rectangle">

    <h1>Registration</h1>

    <desc-label>
        Use your student number in your card as your ID to play the game.
    </desc-label>

    <div class="student-number-container">
        <label for="numeroEstudante">Insert student number:</label>
        <InputText id="numeroEstudante" @bind-Value="NumeroEstudante" />
        <label for="nickName">Insert nickname:</label>
        <InputText id="nickName" @bind-Value="NickEstudante" />
        <button class="btn btn-primary" @onclick="Registar">Create account</button>
        <label>@ErrorMessage</label>
    </div>

    <div class="student-number-QRcode">
        <label for="nEstudanteQrCode">Lost QR code? Enter your student number:</label>
        <InputText id="nEstudanteQrCode" @bind-Value="NumeroEstudanteQRCode" />
        <button class="btn btn-primary" @onclick="GenerateQRCode">Create your QR code!</button>
        <label>@ErrorMessageQrCode</label>
    </div>

</div>




@code {
    private string NumeroEstudante { get; set; } = string.Empty;
    private string NumeroEstudanteQRCode { get; set; } = string.Empty;
    private string NickEstudante { get; set; } = string.Empty;

    private string ErrorMessage { get; set; } = string.Empty;
    private string ErrorMessageQrCode { get; set; } = string.Empty;

    private async Task Registar()
    {       
        if (!System.Text.RegularExpressions.Regex.IsMatch(NumeroEstudante, @"^\d*$"))
        {
            ErrorMessage = "Error: Only numbers allowed.";
            return;
        }

        if (NumeroEstudante.Length != 10)
        {
            ErrorMessage = "Error: Student number has 10 digits.";
            return;
        }

        if (NickEstudante.Length > 10)
        {
            ErrorMessage = "Nickname needs to be 10 character or less.";
            return;
        }

        if (string.Equals(NickEstudante,string.Empty))
        {
            ErrorMessage = "Nickname field is required.";
            return;
        }

        try
        {
            var studentData = new
            {
                StudentNumber = NumeroEstudante,
                StudentNick = NickEstudante
            };

            var response = await HttpClient.PostAsJsonAsync("api/misteriosaquaticos", studentData);

            if (response.IsSuccessStatusCode)
            {
                string navigate = "/sucesso/" + NumeroEstudante;
                NavigationManager.NavigateTo(navigate);
                return;
            }
            else
            {
                ErrorMessage = "Error creating player. That ID may already be in use.";
                StateHasChanged();
                return;
            }
        }

        catch(Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    private void GenerateQRCode()
    {
        if (!System.Text.RegularExpressions.Regex.IsMatch(NumeroEstudanteQRCode, @"^\d*$"))
        {
            ErrorMessageQrCode = "Error: Only numbers allowed.";
            return;
        }

        if (NumeroEstudanteQRCode.Length != 10)
        {
            ErrorMessageQrCode = "Error: Student number has 10 digits.";
            return;
        }

        string navigate = "/qrcode/" + NumeroEstudanteQRCode;
        NavigationManager.NavigateTo(navigate);
    }
}